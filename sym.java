
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Dec 13 11:12:22 EST 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Fri Dec 13 11:12:22 EST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\003\005\000\002\002\004\000\002\004" +
    "\004\000\002\004\006\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\004\000" +
    "\002\007\010\000\002\007\010\000\002\007\010\000\002" +
    "\007\010\000\002\007\003\000\002\007\006\000\002\007" +
    "\003\000\002\007\006\000\002\007\005\000\002\007\005" +
    "\000\002\007\010\000\002\007\012\000\002\007\006\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\012" +
    "\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\010\036\010\037\004\040\011\001\002\000" +
    "\004\043\ufffb\001\002\000\004\002\116\001\002\000\006" +
    "\004\015\020\014\001\002\000\004\043\012\001\002\000" +
    "\004\043\ufffd\001\002\000\004\043\ufffc\001\002\000\064" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\022\uffe5\023\uffe5\024\uffe5\025\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\041\uffe5\042\uffe5\043\uffe5\001\002" +
    "\000\010\004\uffff\012\uffff\020\uffff\001\002\000\010\036" +
    "\010\037\004\040\011\001\002\000\016\013\026\016\025" +
    "\017\017\021\016\024\023\043\012\001\002\000\016\013" +
    "\026\016\025\017\017\021\016\024\023\043\012\001\002" +
    "\000\060\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\041\uffe4\042\uffe4\043\uffe4\001\002\000\020" +
    "\002\001\013\026\016\025\017\017\021\016\024\023\043" +
    "\012\001\002\000\056\002\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\041\ufff2\042\ufff2\043\ufff2\001\002\000" +
    "\060\002\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4" +
    "\035\103\041\ufff4\042\ufff4\043\ufff4\001\002\000\016\013" +
    "\026\016\025\017\017\021\016\024\023\043\012\001\002" +
    "\000\022\002\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\021" +
    "\ufffa\024\ufffa\043\ufffa\001\002\000\004\043\051\001\002" +
    "\000\016\013\026\016\025\017\017\021\016\024\023\043" +
    "\012\001\002\000\014\005\031\006\032\007\034\010\033" +
    "\012\030\001\002\000\056\002\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\041\uffef\042\uffef\043\uffef\001\002" +
    "\000\016\013\026\016\025\017\017\021\016\024\023\043" +
    "\012\001\002\000\016\013\026\016\025\017\017\021\016" +
    "\024\023\043\012\001\002\000\016\013\026\016\025\017" +
    "\017\021\016\024\023\043\012\001\002\000\016\013\026" +
    "\016\025\017\017\021\016\024\023\043\012\001\002\000" +
    "\004\012\036\001\002\000\004\004\037\001\002\000\056" +
    "\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\001\002\000\004\012\041\001\002" +
    "\000\004\004\042\001\002\000\056\002\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\041\ufff5\042\ufff5\043\ufff5" +
    "\001\002\000\004\012\044\001\002\000\004\004\045\001" +
    "\002\000\056\002\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\041\ufff7\042\ufff7\043\ufff7\001\002\000\004\012" +
    "\047\001\002\000\004\004\050\001\002\000\056\002\ufff8" +
    "\005\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\025\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\001\002\000\004\013\052\001\002\000\010" +
    "\036\010\037\004\040\011\001\002\000\006\012\054\020" +
    "\014\001\002\000\004\014\055\001\002\000\016\013\026" +
    "\016\025\017\017\021\016\024\023\043\012\001\002\000" +
    "\020\013\026\015\057\016\025\017\017\021\016\024\023" +
    "\043\012\001\002\000\056\002\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\041\uffed\042\uffed\043\uffed\001\002" +
    "\000\022\002\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\021" +
    "\ufff9\024\ufff9\043\ufff9\001\002\000\016\031\070\032\071" +
    "\033\073\034\067\041\072\042\074\001\002\000\004\025" +
    "\063\001\002\000\016\013\026\016\025\017\017\021\016" +
    "\024\023\043\012\001\002\000\004\023\065\001\002\000" +
    "\016\013\026\016\025\017\017\021\016\024\023\043\012" +
    "\001\002\000\056\002\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\041\uffee\042\uffee\043\uffee\001\002\000\016" +
    "\013\026\016\025\017\017\021\016\024\023\043\012\001" +
    "\002\000\016\013\026\016\025\017\017\021\016\024\023" +
    "\043\012\001\002\000\016\013\026\016\025\017\017\021" +
    "\016\024\023\043\012\001\002\000\016\013\026\016\025" +
    "\017\017\021\016\024\023\043\012\001\002\000\016\013" +
    "\026\016\025\017\017\021\016\024\023\043\012\001\002" +
    "\000\016\013\026\016\025\017\017\021\016\024\023\043" +
    "\012\001\002\000\006\022\uffea\025\uffea\001\002\000\006" +
    "\022\uffe7\025\uffe7\001\002\000\006\022\uffeb\025\uffeb\001" +
    "\002\000\006\022\uffe8\025\uffe8\001\002\000\006\022\uffe9" +
    "\025\uffe9\001\002\000\006\022\uffe6\025\uffe6\001\002\000" +
    "\016\013\026\016\025\017\017\021\016\024\023\043\012" +
    "\001\002\000\060\002\ufff2\004\110\005\ufff2\006\ufff2\007" +
    "\ufff2\010\ufff2\012\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\041\ufff2\042\ufff2\043\ufff2\001\002" +
    "\000\062\002\ufff4\004\107\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4" +
    "\022\ufff4\023\ufff4\024\ufff4\025\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\103\041\ufff4\042\ufff4\043\ufff4\001\002" +
    "\000\056\002\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\041\ufff0\042\ufff0\043\ufff0\001\002\000\056\002\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\001\002\000\056\002\ufff1\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\034\ufff1\041\ufff1\042\ufff1\043\ufff1\001" +
    "\002\000\004\022\112\001\002\000\016\013\026\016\025" +
    "\017\017\021\016\024\023\043\012\001\002\000\056\002" +
    "\uffec\005\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013\uffec" +
    "\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec\023\uffec\024" +
    "\uffec\025\uffec\031\uffec\032\uffec\033\uffec\034\uffec\041\uffec" +
    "\042\uffec\043\uffec\001\002\000\004\043\012\001\002\000" +
    "\010\004\ufffe\012\ufffe\020\ufffe\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\114\000\010\003\004\004\005\005\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\113\001\001" +
    "\000\012\006\017\007\023\010\020\012\021\001\001\000" +
    "\012\007\060\010\020\011\110\012\021\001\001\000\002" +
    "\001\001\000\010\007\057\010\020\012\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\060\010\020" +
    "\011\061\012\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\026\010\020\012\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\045\010\020\012" +
    "\021\001\001\000\010\007\042\010\020\012\021\001\001" +
    "\000\010\007\037\010\020\012\021\001\001\000\010\007" +
    "\034\010\020\012\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\052\005\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\055\007\023\010\020\012\021\001\001\000\010\007\057" +
    "\010\020\012\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\063" +
    "\010\020\012\021\001\001\000\002\001\001\000\010\007" +
    "\065\010\020\012\021\001\001\000\002\001\001\000\010" +
    "\007\101\010\020\012\021\001\001\000\010\007\100\010" +
    "\020\012\021\001\001\000\010\007\077\010\020\012\021" +
    "\001\001\000\010\007\076\010\020\012\021\001\001\000" +
    "\010\007\075\010\020\012\021\001\001\000\010\007\074" +
    "\010\020\012\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\105\010\103\012\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\112\010\020\012\021\001\001\000\002\001\001" +
    "\000\004\012\114\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

 
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // number ::= NUMBER 
            {
              Tnumber RESULT = null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer z = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tnumber(z); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ident ::= ID 
            {
              Tident RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tident(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // boolexpr ::= expr EQ expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,"==",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexpr ::= expr NEQ expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,"!=",e2);
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexpr ::= expr LEQ expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,"<=",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexpr ::= expr GEQ expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,">=",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexpr ::= expr GRAT expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,">",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexpr ::= expr LESS expr 
            {
              Tboolexp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tboolexp(e1,"<",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*boolexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= WHILE boolexpr DO expr 
            {
              Texp RESULT = null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tboolexp b1 = (Tboolexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Twhile(b1,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= FUNCTION ID LPAREN par_list RPAREN LBRACK expr_list RBRACK 
            {
              Texp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tparlist p = (Tparlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Texplist e = (Texplist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new Tfunction(i,p,e);*/ 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IF boolexpr THEN expr ELSE expr 
            {
              Texp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tboolexp e1 = (Tboolexp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e3 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfThenElseClause(e1,e2,e3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= LPAREN expr RPAREN 
            {
              Texp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= ident IS expr 
            {
              Texp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tassign(i,"=",e); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= ident IS number SEMI 
            {
              Texp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tnumber n = (Tnumber)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tassign(i, "=", n);   
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= number 
            {
              Texp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tnumber n = (Tnumber)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n;   
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= ident IS ident SEMI 
            {
              Texp RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tident i1 = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tident i2 = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tassign(i1, "=", i2) ;  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= ident 
            {
              Texp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i;  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= LPAREN expr DIVIDE expr RPAREN SEMI 
            {
              Texp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Texpinfix(e1,"/",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= LPAREN expr TIMES expr RPAREN SEMI 
            {
              Texp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Texpinfix(e1,"*",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= LPAREN expr MINUS expr RPAREN SEMI 
            {
              Texp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texp e1 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp e2 = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Texpinfix(e1,"-",e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= LPAREN expr PLUS expr RPAREN SEMI 
            {
              Texp RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Texp l = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Texp r = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Texpinfix(l,"+",r); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_list ::= expr_list expr 
            {
              Texplist RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Texplist(l,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr_list ::= expr 
            {
              Texplist RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texp e = (Texp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Texplist(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*expr_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= STRING 
            {
              Type RESULT = null;
		 RESULT = new TypeStr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= INT 
            {
              Type RESULT = null;
		 RESULT = new TypeInt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= BOOLEAN 
            {
              Type RESULT = null;
		 RESULT = new TypeBool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // par_list ::= par_list COMMA type ident 
            {
              Tparlist RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tparlist p = (Tparlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tparlist(p,t,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*par_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // par_list ::= type ident 
            {
              Tparlist RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Tident i = (Tident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tparlist(t,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*par_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tprogram start_val = (Tprogram)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= par_list SEMI expr_list 
            {
              Tprogram RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tparlist p = (Tparlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Texplist l = (Texplist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Tprogram(p,l); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

